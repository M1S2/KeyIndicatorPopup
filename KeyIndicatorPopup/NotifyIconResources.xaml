<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:KeyIndicatorPopup"
                    xmlns:viewModels="clr-namespace:KeyIndicatorPopup.ViewModel"
                    xmlns:tb="http://www.hardcodet.net/taskbar">

    <!-- see: https://github.com/hardcodet/wpf-notifyicon/blob/master/Hardcodet.NotifyIcon.Wpf/Source/Windowless%20Sample/NotifyIconResources.xaml -->
    
    <!-- The taskbar context menu - the first row is a dummy to show off simple data binding -->
    <!-- The "shared" directive is needed if we reopen the sample window a few times - WPF will otherwise
        reuse the same context menu (which is a resource) again (which will have its DataContext set to the old TaskbarIcon) -->
    <ContextMenu x:Shared="false" x:Key="SysTrayMenu">
        <MenuItem Header="Show Window" Command="{Binding ShowWindowCommand}" />
        <MenuItem Header="Hide Window" Command="{Binding HideWindowCommand}" />
        <Separator />
        <MenuItem Header="Exit" Command="{Binding ExitApplicationCommand}" />
    </ContextMenu>

    <viewModels:NotifyIconViewModel x:Shared="true"  x:Key="notifyViewModel"/>

    <local:InfoBalloonControl x:Key="InfoBalloon"/>

    <!--<Border x:Key="InfoBalloon" Background="#CCA9A9A9" BorderBrush="Gray" BorderThickness="2" CornerRadius="10" Width="150" Height="150" Margin="50">
        <TextBlock FontSize="20" VerticalAlignment="Center" HorizontalAlignment="Center" Text="ABC"/>
    </Border>-->

    <!-- the application's NotifyIcon - started from App.xaml.cs. Declares its own view model. -->
    <tb:TaskbarIcon x:Key="NotifyIcon"
                    IconSource="Resources/AppIcon.ico"
                    ToolTipText="Double-click for window, right-click for menu"
                    DoubleClickCommand="{Binding ShowWindowCommand}"
                    ContextMenu="{StaticResource SysTrayMenu}">

        <!-- self-assign a data context (could also be done programmatically) -->
        <tb:TaskbarIcon.DataContext>
            <Binding Source="{StaticResource notifyViewModel}"/>
        </tb:TaskbarIcon.DataContext>
    </tb:TaskbarIcon>
    
</ResourceDictionary>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:KeyIndicatorPopup"
                    xmlns:viewModels="clr-namespace:KeyIndicatorPopup.ViewModel"
                    xmlns:tb="http://www.hardcodet.net/taskbar">

    <!-- see: https://github.com/hardcodet/wpf-notifyicon/blob/master/Hardcodet.NotifyIcon.Wpf/Source/Windowless%20Sample/NotifyIconResources.xaml -->
    
    <!-- The "shared" directive is needed if we reopen the sample window a few times - WPF will otherwise reuse the same context menu (which is a resource) again (which will have its DataContext set to the old TaskbarIcon) -->
    <ContextMenu x:Shared="false" x:Key="SysTrayMenu">
        <MenuItem Header="Configure..." Command="{Binding ShowWindowCommand}" />
        <Separator />
        <MenuItem Header="Exit" Command="{Binding ExitApplicationCommand}" />
    </ContextMenu>

    <!-- the application's NotifyIcon - started from App.xaml.cs. Declares its own view model. -->
    <tb:TaskbarIcon x:Key="NotifyIcon"
                    IconSource="Resources/AppIcon.ico"
                    ToolTipText="Double-click for configuration window, right-click for menu"
                    DoubleClickCommand="{Binding ShowWindowCommand}"
                    ContextMenu="{StaticResource SysTrayMenu}">

        <!-- self-assign a data context (could also be done programmatically) -->
        <tb:TaskbarIcon.DataContext>
            <viewModels:NotifyIconViewModel/>
        </tb:TaskbarIcon.DataContext>
    </tb:TaskbarIcon>
    
</ResourceDictionary>